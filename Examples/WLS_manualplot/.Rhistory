treatment <- rosetta_stone$Treatment[rosetta_stone$plate == plate_]
date_eggs_picked <- rosetta_stone$Date.Eggs.Picked[rosetta_stone$plate == plate_]
date_fudr <- rosetta_stone$Date.FUDR.Added[rosetta_stone$plate == plate_]
date_adulthood <- rosetta_stone$Date.of.Adulthood[rosetta_stone$plate == plate_]
temperature <- rosetta_stone$Temp[rosetta_stone$plate == plate_]
lifespan_counts$Lifespan_number[lifespan_counts$plate == plate_] <- lifespan_number
lifespan_counts$Genotype[lifespan_counts$plate == plate_] <- worm_strain
lifespan_counts$Bacteria[lifespan_counts$plate == plate_] <- bacteria
lifespan_counts$Treatment[lifespan_counts$plate == plate_] <- treatment
lifespan_counts$Date_eggs_picked[lifespan_counts$plate == plate_] <- date_eggs_picked
lifespan_counts$Date_fudr[lifespan_counts$plate == plate_] <- date_fudr
lifespan_counts$Date_adulthood[lifespan_counts$plate == plate_] <- date_adulthood
lifespan_counts$Temperature[lifespan_counts$plate == plate_] <- temperature
}
for (lifespan_no in unique(lifespan_counts$Lifespan_number)){
lifespan_counts$temp_label <- paste0(lifespan_counts$Genotype, lifespan_counts$Treatment, lifespan_counts$Bacteria, lifespan_counts$Lifespan_number)
}
converted <- lifespan_counts[lifespan_counts$ID == "converted"]
if (convert_from_epoch_time) {
for (lifespan_no in unique(lifespan_counts$Lifespan_number)){
lifespan_of_interest <- lifespan_counts[lifespan_counts$Lifespan_number == lifespan_no,]
for (unique_condition in unique(lifespan_of_interest$temp_label)) {
unique_condition_lifespan_of_interest <- lifespan_of_interest[lifespan_of_interest$temp_label == unique_condition,]
start_day <- min(unique_condition_lifespan_of_interest$Timestamp)
unique_condition_lifespan_of_interest$Start_day <- start_day
unique_condition_lifespan_of_interest$Day[unique_condition_lifespan_of_interest$temp_label == unique_condition] <- ceiling(((unique_condition_lifespan_of_interest$Timestamp) - as.numeric(unique_condition_lifespan_of_interest$Start_day))/86400)
converted <- rbind(converted, unique_condition_lifespan_of_interest)
}
}
lifespan_counts <- converted
}
# M_all is the column where the censored worms are documented (M = missing, but also includes explosions and other censored information)
lifespan_counts$M_all <- 0 ### THIS IS WHERE WE MAY EDIT THE SCRIPT IN ORDER TO PASS IN CENSORED INFORMATION TO THE SCRIPT!!!! RIGHT NOW, THIS PROCESSING DOES NOT INCLUDE CENSORING
# we now can get the worm data information for which day each worm died in each lifespan
if (processed_dir_path == FALSE){
suppressWarnings(
dir.create(file.path(getwd(), "results_counts_converted"))
)
}
for (lifespan_no in unique(lifespan_counts$Lifespan_number)){
lifespan_data <- data.frame("Day" = c(), "status" = c(), "Genotype" = c(),
"Treatment"=c(), "Bacteria"=c(), "N_worms" = c(), "MeanWLS" = c())
lifespan_of_interest <- lifespan_counts[lifespan_counts$Lifespan_number == lifespan_no,]
for (unique_condition in unique(lifespan_of_interest$temp_label)){
lifespan_of_interest_unique_condition <- lifespan_of_interest[lifespan_of_interest$temp_label == unique_condition,]
worm_res <- data.frame("Day" = c(), "status" = c(), "Genotype" = c(),
"Treatment"=c(), "Bacteria"=c())
for (day_ in sort(unique(lifespan_of_interest_unique_condition$Day))){
if (day_ > 1) {
change_in_worm_count <- prev_day_alive_count - max(lifespan_of_interest_unique_condition$Count[lifespan_of_interest_unique_condition$Day == day_])
if (change_in_worm_count > 0) {
censored <- min(lifespan_of_interest_unique_condition$M_all[lifespan_of_interest_unique_condition$Day == day_])
strain <- unique(lifespan_of_interest_unique_condition$Genotype)
treatment <- unique(lifespan_of_interest_unique_condition$Treatment)
bacteria <- unique(lifespan_of_interest_unique_condition$Bacteria)
if (censored > 0){
worm_res_ <- data.frame("Day" = rep(day_, censored),
"status" = rep(0, censored),
"Genotype" = rep(strain, censored),
"Treatment" = rep(treatment, censored),
"Bacteria" = rep(bacteria, censored))
worm_res <- rbind(worm_res, worm_res_)
}
dead <- change_in_worm_count - censored
if (dead > 0){
worm_res_ <- data.frame("Day" = rep(day_, dead),
"status" = rep(1, dead),
"Genotype" = rep(strain, dead),
"Treatment" = rep(treatment, dead),
"Bacteria" = rep(bacteria, dead))
worm_res <- rbind(worm_res, worm_res_)
}
prev_day_alive_count <- max(lifespan_of_interest_unique_condition$Count[lifespan_of_interest_unique_condition$Day == day_])
}
} else if (day_ == 1) {
prev_day_alive_count <- max(lifespan_of_interest_unique_condition$Count[lifespan_of_interest_unique_condition$Day == day_])
}
}
if (nrow(worm_res) > 0){
worm_res$Day <- as.numeric(worm_res$Day)
worm_res$status <- as.numeric(worm_res$status)
worm_res$N_worms <- nrow(worm_res[worm_res$status == 1,])
worm_res$MeanWLS <- mean(worm_res$Day[worm_res$status==1])
lifespan_data <- rbind(lifespan_data, worm_res)
}
}
# let's get the labeling for the type of experiment going
if (lifespan_type == "RNAi"){
lifespan_data$lifespan_type <- lifespan_data$Bacteria
control <- empty_vector
if (sum(grepl(empty_vector, lifespan_data$Bacteria)) == 0){
return("Error. Did you put in the correct empty_vector keyword argument?")
}
} else if (lifespan_type == "Genotype") {
lifespan_data$lifespan_type <- "" #empty bcs all this is used for is to create the label below
control <- Wild_type
if (sum(grepl(Wild_type, lifespan_data$Genotype)) == 0){
return("Error. Did you put in the correct Wild_type keyword argument?")
}
} else if (lifespan_type == "Drug" | lifespan_type == "Treatment"){
lifespan_data$lifespan_type <- lifespan_data$Treatment
control <- Vehicle
if (sum(grepl(Vehicle, lifespan_data$Treatment)) == 0){
return("Error. Did you put in the correct Vehicle keyword argument?")
}
} else {
return("Error. Did you put in the correct lifespan_type keyword argument?")
}
if (lifespan_type == "Genotype") {
#create the label that is going to be used for the plots, without the astricks, which will be added in a second.
lifespan_data$label_ <- paste0(lifespan_data$Genotype, " (", round(lifespan_data$MeanWLS,1), ", ", lifespan_data$N_worms, ")")
} else {
#create the label that is going to be used for the plots, without the astricks, which will be added in a second.
lifespan_data$label_ <- paste0(lifespan_data$Genotype, " + ", lifespan_data$lifespan_type, " (", round(lifespan_data$MeanWLS,1), ", ", lifespan_data$N_worms, ")")
}
if (processed_dir_path == FALSE){
write.csv(x = lifespan_data, file = paste0(file.path("results_counts_converted", paste0("Lifespan_", lifespan_no, ".csv"))))
} else {
write.csv(x = lifespan_data, file = paste0(processed_dir_path, paste0("Lifespan_", lifespan_no, ".csv")))
}
}
lifespan_type = "Genotype"
counts_file = "counts.csv"
rosetta_stone_file = "rosetta_stone.csv"
rosettastone_index_colnumber = 1
lifespancounts_index_colnumber = 1
rosetta_stone_platenumber_replacement = ""
lifespan_counts_platenumber_replacement = ""
lifespancounts_count_colnumber = 6
convert_from_epoch_time = TRUE
processed_dir_path = FALSE #this is where to put the path for the processed files to be saved
empty_vector = "L4440" #If RNAi experiment, this is the empty vector
Vehicle = "Vehicle" #If drug experiment, what was the control, which would be used for stats
Wild_type = "N2" #If Genotype experiment, what was the control, which would be used for stats
lifespan_type = "Genotype"
counts_file = "counts.csv"
rosetta_stone_file = "qr.csv"
rosettastone_index_colnumber = 1
lifespancounts_index_colnumber = 3
lifespancounts_count_colnumber = 6
lifespan_counts_platenumber_replacement = "QR"
# in case you want to convert from the timestamp to datatime:
# lifespan_counts$datetime <- lubridate::as_datetime(lifespan_counts$Timestamp)
lifespan_counts <- as.data.frame(read.csv(counts_file))
rosetta_stone <- as.data.frame(read.csv(rosetta_stone_file))
if ("plate" %in% colnames(lifespan_counts) == FALSE) {
lifespan_counts$plate <- sub(pattern = lifespan_counts_platenumber_replacement, replacement = "", x = lifespan_counts[,lifespancounts_index_colnumber])
}
if ("plate" %in% colnames(rosetta_stone) == FALSE) {
rosetta_stone$plate <- sub(pattern = rosetta_stone_platenumber_replacement, replacement = "", x = rosetta_stone[,rosettastone_index_colnumber])
}
if ("Lifespan_Number" %in% colnames(rosetta_stone) == FALSE) {
if ("Lifespan.Number"%in% colnames(rosetta_stone)) {
rosetta_stone$Lifespan_Number <- rosetta_stone$Lifespan.Number
}
}
if ("Count" %in% colnames(lifespan_counts) == FALSE) {
lifespan_counts$Count <- lifespan_counts[,lifespancounts_count_colnumber]
}
# in case you want to convert from the timestamp to datatime:
# lifespan_counts$datetime <- lubridate::as_datetime(lifespan_counts$Timestamp)
lifespan_counts <- as.data.frame(read.csv(counts_file))
lifespan_type = "Genotype"
counts_file = "counts.csv"
rosetta_stone_file = "rosetta_stone.csv"
rosettastone_index_colnumber = 1
lifespancounts_index_colnumber = 1
rosetta_stone_platenumber_replacement = ""
lifespan_counts_platenumber_replacement = ""
lifespancounts_count_colnumber = 6
convert_from_epoch_time = TRUE
processed_dir_path = FALSE #this is where to put the path for the processed files to be saved
empty_vector = "L4440" #If RNAi experiment, this is the empty vector
Vehicle = "Vehicle" #If drug experiment, what was the control, which would be used for stats
Wild_type = "N2" #If Genotype experiment, what was the control, which would be used for stats
lifespan_type = "Genotype"
counts_file = "counts.csv"
rosetta_stone_file = "qr.csv"
rosettastone_index_colnumber = 1
lifespancounts_index_colnumber = 3
lifespancounts_count_colnumber = 6
lifespan_counts_platenumber_replacement = "QR"
setwd("~/McCormick-WAM/1-Lifespans-All")
# in case you want to convert from the timestamp to datatime:
# lifespan_counts$datetime <- lubridate::as_datetime(lifespan_counts$Timestamp)
lifespan_counts <- as.data.frame(read.csv(counts_file))
rosetta_stone <- as.data.frame(read.csv(rosetta_stone_file))
if ("plate" %in% colnames(lifespan_counts) == FALSE) {
lifespan_counts$plate <- sub(pattern = lifespan_counts_platenumber_replacement, replacement = "", x = lifespan_counts[,lifespancounts_index_colnumber])
}
if ("plate" %in% colnames(rosetta_stone) == FALSE) {
rosetta_stone$plate <- sub(pattern = rosetta_stone_platenumber_replacement, replacement = "", x = rosetta_stone[,rosettastone_index_colnumber])
}
if ("Lifespan_Number" %in% colnames(rosetta_stone) == FALSE) {
if ("Lifespan.Number"%in% colnames(rosetta_stone)) {
rosetta_stone$Lifespan_Number <- rosetta_stone$Lifespan.Number
}
}
if ("Count" %in% colnames(lifespan_counts) == FALSE) {
lifespan_counts$Count <- lifespan_counts[,lifespancounts_count_colnumber]
}
for (plate_ in lifespan_counts$plate){
if (plate_ %in% rosetta_stone$plate == FALSE){
return(paste0("ERROR: ", plate_, " exists in the lifespan_counts_file but not the rosetta_stone_file"))
}
}
censored_plates <- rosetta_stone$Censor.plate.[rosetta_stone$plate == plate_] == "yes"
lifespan_counts <- lifespan_counts[lifespan_counts$plate %in% censored_plates == FALSE,]
censored_plates
lifespan_counts
#transfer the plate information from the rossetta_stone variable to the lifespan_counts matrix
for (plate_ in unique(lifespan_counts$plate)) {
lifespan_number <- rosetta_stone$Lifespan_Number[rosetta_stone$plate == plate_]
worm_strain <- rosetta_stone$Worm.Strain[rosetta_stone$plate == plate_]
#make the strain italic if it is a gene name
if (grepl("[A-Za-z]{3}-[0-9]{1}", worm_strain) |
grepl("[A-Za-z]{4}-[0-9]{1}", worm_strain) |
grepl("[A-Za-z]{3}-[0-9]{2}", worm_strain) |
grepl("[A-Za-z]{4}-[0-9]{2}", worm_strain)) {
worm_strain <- paste0("<i>", worm_strain, "</i>") # Markdown formatting for italics
}
bacteria <- rosetta_stone$Bacteria[rosetta_stone$plate == plate_]
treatment <- rosetta_stone$Treatment[rosetta_stone$plate == plate_]
date_eggs_picked <- rosetta_stone$Date.Eggs.Picked[rosetta_stone$plate == plate_]
date_fudr <- rosetta_stone$Date.FUDR.Added[rosetta_stone$plate == plate_]
date_adulthood <- rosetta_stone$Date.of.Adulthood[rosetta_stone$plate == plate_]
temperature <- rosetta_stone$Temp[rosetta_stone$plate == plate_]
lifespan_counts$Lifespan_number[lifespan_counts$plate == plate_] <- lifespan_number
lifespan_counts$Genotype[lifespan_counts$plate == plate_] <- worm_strain
lifespan_counts$Bacteria[lifespan_counts$plate == plate_] <- bacteria
lifespan_counts$Treatment[lifespan_counts$plate == plate_] <- treatment
lifespan_counts$Date_eggs_picked[lifespan_counts$plate == plate_] <- date_eggs_picked
lifespan_counts$Date_fudr[lifespan_counts$plate == plate_] <- date_fudr
lifespan_counts$Date_adulthood[lifespan_counts$plate == plate_] <- date_adulthood
lifespan_counts$Temperature[lifespan_counts$plate == plate_] <- temperature
}
lifespan_counts
unique(lifespan_counts$Lifespan_number)
for (lifespan_no in unique(lifespan_counts$Lifespan_number)){
lifespan_counts$temp_label <- paste0(lifespan_counts$Genotype, lifespan_counts$Treatment, lifespan_counts$Bacteria, lifespan_counts$Lifespan_number)
}
converted <- lifespan_counts[lifespan_counts$ID == "converted"]
converted
head(lifespan_counts)
converted <- lifespan_counts[0,]
if (convert_from_epoch_time) {
for (lifespan_no in unique(lifespan_counts$Lifespan_number)){
lifespan_of_interest <- lifespan_counts[lifespan_counts$Lifespan_number == lifespan_no,]
for (unique_condition in unique(lifespan_of_interest$temp_label)) {
unique_condition_lifespan_of_interest <- lifespan_of_interest[lifespan_of_interest$temp_label == unique_condition,]
start_day <- min(unique_condition_lifespan_of_interest$Timestamp)
unique_condition_lifespan_of_interest$Start_day <- start_day
unique_condition_lifespan_of_interest$Day[unique_condition_lifespan_of_interest$temp_label == unique_condition] <- ceiling(((unique_condition_lifespan_of_interest$Timestamp) - as.numeric(unique_condition_lifespan_of_interest$Start_day))/86400)
converted <- rbind(converted, unique_condition_lifespan_of_interest)
}
}
lifespan_counts <- converted
}
# M_all is the column where the censored worms are documented (M = missing, but also includes explosions and other censored information)
lifespan_counts$M_all <- 0 ### THIS IS WHERE WE MAY EDIT THE SCRIPT IN ORDER TO PASS IN CENSORED INFORMATION TO THE SCRIPT!!!! RIGHT NOW, THIS PROCESSING DOES NOT INCLUDE CENSORING
# we now can get the worm data information for which day each worm died in each lifespan
if (processed_dir_path == FALSE){
suppressWarnings(
dir.create(file.path(getwd(), "results_counts_converted"))
)
}
for (lifespan_no in unique(lifespan_counts$Lifespan_number)){
lifespan_data <- data.frame("Day" = c(), "status" = c(), "Genotype" = c(),
"Treatment"=c(), "Bacteria"=c(), "N_worms" = c(), "MeanWLS" = c())
lifespan_of_interest <- lifespan_counts[lifespan_counts$Lifespan_number == lifespan_no,]
for (unique_condition in unique(lifespan_of_interest$temp_label)){
lifespan_of_interest_unique_condition <- lifespan_of_interest[lifespan_of_interest$temp_label == unique_condition,]
worm_res <- data.frame("Day" = c(), "status" = c(), "Genotype" = c(),
"Treatment"=c(), "Bacteria"=c())
for (day_ in sort(unique(lifespan_of_interest_unique_condition$Day))){
if (day_ > 1) {
change_in_worm_count <- prev_day_alive_count - max(lifespan_of_interest_unique_condition$Count[lifespan_of_interest_unique_condition$Day == day_])
if (change_in_worm_count > 0) {
censored <- min(lifespan_of_interest_unique_condition$M_all[lifespan_of_interest_unique_condition$Day == day_])
strain <- unique(lifespan_of_interest_unique_condition$Genotype)
treatment <- unique(lifespan_of_interest_unique_condition$Treatment)
bacteria <- unique(lifespan_of_interest_unique_condition$Bacteria)
if (censored > 0){
worm_res_ <- data.frame("Day" = rep(day_, censored),
"status" = rep(0, censored),
"Genotype" = rep(strain, censored),
"Treatment" = rep(treatment, censored),
"Bacteria" = rep(bacteria, censored))
worm_res <- rbind(worm_res, worm_res_)
}
dead <- change_in_worm_count - censored
if (dead > 0){
worm_res_ <- data.frame("Day" = rep(day_, dead),
"status" = rep(1, dead),
"Genotype" = rep(strain, dead),
"Treatment" = rep(treatment, dead),
"Bacteria" = rep(bacteria, dead))
worm_res <- rbind(worm_res, worm_res_)
}
prev_day_alive_count <- max(lifespan_of_interest_unique_condition$Count[lifespan_of_interest_unique_condition$Day == day_])
}
} else if (day_ == 1) {
prev_day_alive_count <- max(lifespan_of_interest_unique_condition$Count[lifespan_of_interest_unique_condition$Day == day_])
}
}
if (nrow(worm_res) > 0){
worm_res$Day <- as.numeric(worm_res$Day)
worm_res$status <- as.numeric(worm_res$status)
worm_res$N_worms <- nrow(worm_res[worm_res$status == 1,])
worm_res$MeanWLS <- mean(worm_res$Day[worm_res$status==1])
lifespan_data <- rbind(lifespan_data, worm_res)
}
}
# let's get the labeling for the type of experiment going
if (lifespan_type == "RNAi"){
lifespan_data$lifespan_type <- lifespan_data$Bacteria
control <- empty_vector
if (sum(grepl(empty_vector, lifespan_data$Bacteria)) == 0){
return("Error. Did you put in the correct empty_vector keyword argument?")
}
} else if (lifespan_type == "Genotype") {
lifespan_data$lifespan_type <- "" #empty bcs all this is used for is to create the label below
control <- Wild_type
if (sum(grepl(Wild_type, lifespan_data$Genotype)) == 0){
return("Error. Did you put in the correct Wild_type keyword argument?")
}
} else if (lifespan_type == "Drug" | lifespan_type == "Treatment"){
lifespan_data$lifespan_type <- lifespan_data$Treatment
control <- Vehicle
if (sum(grepl(Vehicle, lifespan_data$Treatment)) == 0){
return("Error. Did you put in the correct Vehicle keyword argument?")
}
} else {
return("Error. Did you put in the correct lifespan_type keyword argument?")
}
if (lifespan_type == "Genotype") {
#create the label that is going to be used for the plots, without the astricks, which will be added in a second.
lifespan_data$label_ <- paste0(lifespan_data$Genotype, " (", round(lifespan_data$MeanWLS,1), ", ", lifespan_data$N_worms, ")")
} else {
#create the label that is going to be used for the plots, without the astricks, which will be added in a second.
lifespan_data$label_ <- paste0(lifespan_data$Genotype, " + ", lifespan_data$lifespan_type, " (", round(lifespan_data$MeanWLS,1), ", ", lifespan_data$N_worms, ")")
}
if (processed_dir_path == FALSE){
write.csv(x = lifespan_data, file = paste0(file.path("results_counts_converted", paste0("Lifespan_", lifespan_no, ".csv"))))
} else {
write.csv(x = lifespan_data, file = paste0(processed_dir_path, paste0("Lifespan_", lifespan_no, ".csv")))
}
}
library(WLSplot)
empty_vector <- c("daf", "N2", "yfg-1")
for (i %in% empty_vector){
for (i in empty_vector){
print(i)
}
empty_vector = "N2"
for (i in empty_vector){
print(i)
}
library(WLSplot)
setwd("~/WLSplot/Samples_Examples/WLS_autoplot")
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
library(WLSplot)
setwd("~/WLSplot/Samples_Examples/WLS_autoplot")
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
(max(round(max(24), -1), 25))
(max(round(max(24) + 1, -1), 25))
(max(round(max(24) + 2, -1), 25))
(max(round(max(25) + 1, -1), 25))
setwd("~/WLSplot/Samples_Examples/WLS_autoplot")
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
setwd("~/WLSplot/Samples_Examples/WLS_autoplot")
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
devtools::build_vignettes()
devtools::use_vignettes()
devtools::build_vignettes()
devtools::document()
devtools:check()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
knitr
knitr()
library(knitr)
reoxygen2::reoxygenize()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
usethis::use_vignette("my-vignette")
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
setwd("~/WLSplot/Examples/WLS_autoplot")
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
# this is an example of WLS autoplotting a lifespan where different worm Genotypes were tested.
# all questions regarding this script, or the WLSplot library in general should be directed toward Blaise at blaisemariner17@gmail.com
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
# this is an example of WLS autoplotting a lifespan where different worm Genotypes were tested.
# all questions regarding this script, or the WLSplot library in general should be directed toward Blaise at blaisemariner17@gmail.com
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraries required for WLSplot
require(scales)
require(WLSplot)
#run the autoplot function, which will recognize automatically the .ods files in the current working directory.
WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = FALSE)
# this is an example of WLS autoplotting lifespans in multiple subdirectories
# all questions regarding this script, or the WLSplot library in general should be directed toward Blaise at blaisemariner17@gmail.com
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(scales)
require(WLSplot)
#The following example shows that autoplot can be used to output a matrix that is used for the Kaplan-Meir plotting.
lifespan_data <- WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = TRUE)
head(lifespan_data)
#This lifespan_data can then be passed into the WLS_manualpot function for more control of the axis labels, researchers, limits, etc.
WLS_manualplot(lifespan_data = lifespan_data, col_list = c("black", "blue", "red", "darkgreen"),
control = "N2", plot_title = "Test", lifespan_type = "Genotype", researchers = "BLM",
x_upper_bound = 35, plot_individual_lifespans_to_control = FALSE, stats = TRUE
)
# this is an example of WLS autoplotting lifespans in multiple subdirectories
# all questions regarding this script, or the WLSplot library in general should be directed toward Blaise at blaisemariner17@gmail.com
rm(list = ls())
# this sets the working directory to this script's path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(scales)
require(WLSplot)
#The following example shows that autoplot can be used to output a matrix that is used for the Kaplan-Meir plotting.
lifespan_data <- WLSplot::WLS_autoplot(lifespan_type = "Genotype", return_data = TRUE)
head(lifespan_data)
#This lifespan_data can then be passed into the WLS_manualpot function for more control of the axis labels, researchers, limits, etc.
WLS_manualplot(lifespan_data = lifespan_data, col_list = c("black", "blue", "red", "darkgreen"),
control = "N2", plot_title = "Test", lifespan_type = "Genotype", researchers = "BLM",
x_upper_bound = 35, plot_individual_lifespans_to_control = FALSE, stats = TRUE, temperature = "25°C"
)
